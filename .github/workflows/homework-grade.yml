name: Homework Grade

on:
  workflow_call:

permissions:
  checks: write
  actions: read
  contents: read

jobs:
  test:
    name: Testing
    runs-on: ubuntu-latest
    timeout-minutes: 10

    permissions:
      checks: read
      actions: read
      contents: read

    outputs:
      homework_name: ${{ steps.homework_setup.outputs.homework_name }}

      points: ${{ steps.autograder.outputs.points }}
      autograder: ${{ steps.autograder.outcome }}

      compile_status: ${{ steps.check_compile.outcome }}
      javadoc_status: ${{ steps.check_javadoc.outcome }}
      commits_status: ${{ steps.check_commits.outcome }}

    steps:
      - name: Setup homework environment
        id: homework_setup
        uses: usf-cs272-fall2023/cs272-bot/actions/homework-setup@main

      - name: Run tests and autograder
        id: autograder
        uses: education/autograding@v1

      # must be after autograder to avoid compile issues
      # run this step even if the autograder failed (but not if it was skipped or cancelled)
      - name: Check for compile warnings
        id: check_compile
        if: ${{ !cancelled() && (steps.autograder.outcome == 'success' || steps.autograder.outcome == 'failure') }}
        shell: bash
        run: |
          mvn -f pom.xml -ntp "-Dconfig.xlint=-Xlint:all,-path,-processing" "-Dconfig.xdoclint=-Xdoclint:none" "-Dconfig.werror=true" "-Dmaven.compiler.showWarnings=true" clean compile

      # must be after autograder to avoid compile issues
      # run this step even if the autograder failed (but not if it was skipped or cancelled)
      - name: Check for Javadoc warnings
        id: check_javadoc
        if: ${{ !cancelled() && (steps.autograder.outcome == 'success' || steps.autograder.outcome == 'failure') }}
        shell: bash
        run: |
          mvn -f pom.xml -ntp "-Dconfig.xlint=-Xlint:none" "-Dconfig.xdoclint=-Xdoclint:all/private" "-Dconfig.werror=true" "-Dmaven.compiler.showWarnings=true" clean compile

      # check while we still have the repository checked out
      # run this step even if the autograder failed (but not if it was skipped or cancelled)
      - name: Check for minimum number of commits
        id: check_commits
        if: ${{ !cancelled() && (steps.autograder.outcome == 'success' || steps.autograder.outcome == 'failure') }}
        shell: bash
        env:
          MIN_COMMITS: 3
        run: |
          echo "Listing commits..."
          git fetch --unshallow
          git log --oneline refs/remotes/origin/main
          
          NUM_COMMITS=$(git rev-list --count refs/remotes/origin/main)
          echo "NUM_COMMITS=${NUM_COMMITS}" >> $GITHUB_ENV
          echo "num_commits=${NUM_COMMITS}" >> $GITHUB_OUTPUT

          echo ""
          echo "Minimum Commits: ${MIN_COMMITS}"
          echo "Found Commits: ${NUM_COMMITS} (at least)"

          if [[ ${NUM_COMMITS} -ge ${MIN_COMMITS} ]]; then
            exit 0
          fi

  grade:
    name: Autograding # need a check named "Autograding"
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: test
    if: ${{ !cancelled() && (needs.test.outputs.autograder == 'success' || needs.test.outputs.autograder == 'failure') }}

    steps:
      - name: Output autograder results
        uses: actions/github-script@v6
        with:
          script: |
            const outputs = ${{ toJSON(needs.test.outputs) }};

            for (const property in outputs) {
              core.info(`${property}: ${outputs[property]}`);
              core.setOutput(property, outputs[property]);
            }
        
      - name: Calculate non-late deductions
        uses: usf-cs272-fall2023/cs272-bot/actions/homework-setup@main
        with:
          compile_status: ${{ needs.test.outputs.compile_status }}
          javadoc_status: ${{ needs.test.outputs.javadoc_status }}
          commits_status: ${{ needs.test.outputs.commits_status }}

    # try {
    #   const points = process.env.POINTS;
    #   const matches = Array.from(points.matchAll(/\d+/g));
    #   console.log(matches);

    #   const earned = parseInt(matches[0][0]);
    #   const possible = parseInt(matches[1][0]);

    #   core.info(earned);
    #   core.info(possible);
    # }
    # catch (error) {
    #   core.setFailed(`Unable to calculate non-late deductions.`);
    # }


    # TODO: Add checking commits, warnings, deadline to grade job, add badge